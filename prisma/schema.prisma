generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  friendRequestSent FriendRequest[] @relation("FriendRequestSender")
  friendRequestReceived FriendRequest[] @relation("FriendRequestReceiver")

  currentUser Friend[] @relation("currentUser")
  friends Friend[] @relation("Friendship")
  groups Group[] @relation("GroupMembers")

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")

  admin Group[] @relation("GroupAdmin")

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id String @id @default(uuid())

  senderId String
  sender Profile @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver Profile @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
}

model Friend {
  id String @id @default(uuid())

  userId String
  profile Profile @relation("currentUser", fields: [userId], references: [id], onDelete: Cascade)

  friends Profile[] @relation("Friendship")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@unique([userId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Profile @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Profile @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

enum Status {
  SENDING
  COMPLETED
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text
  status Status @default(SENDING)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seen Boolean @default(false)
  deleted Boolean @default(false)

  @@index([profileId])
  @@index([conversationId])
}

model Group {
  id String @id @default(uuid())
  name String
  description String @db.Text
  
  adminId String
  admin Profile @relation("GroupAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members Profile[] @relation("GroupMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
}