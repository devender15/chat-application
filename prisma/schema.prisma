generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  // groups Group[]

  friendRequestSent FriendRequest[] @relation("FriendRequestSender")
  friendRequestReceived FriendRequest[] @relation("FriendRequestReceiver")

  currentUser Friend[] @relation("currentUser")
  friends Friend[] @relation("Friendship")

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id String @id @default(uuid())

  senderId String
  sender Profile @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver Profile @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
}

model Friend {
  id String @id @default(uuid())

  userId String
  profile Profile @relation("currentUser", fields: [userId], references: [id], onDelete: Cascade)

  friends Profile[] @relation("Friendship")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@unique([userId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Profile @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Profile @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([profileId])
  @@index([conversationId])
}

// enum MemberRole {
//   ADMIN
//   GUEST
// }

// model Member {
//   id String @id @default(uuid())
//   role MemberRole @default(GUEST)

//   profileId String
//   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//   message Message[]
//   directMessages DirectMessage[]
//   friends Friend[]

//   conversationsInitiated Conversation[] @relation("MemberOne")
//   conversationReceived Conversation[] @relation("MemberTwo")

//   // now storing all the friends of this user in a single field
//   friendsList Friend[] @relation("Friendship")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([profileId])
// }

// model Group {
//   id String @id @default(uuid())
//   name String
//   imageUrl String @db.Text

//   profileId String
//   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([profileId])
// }

// model Message {
//   id String @id @default(uuid())
//   content String @db.Text

//   fileUrl String? @db.Text

//   memberId String
//   member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

//   deleted Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([memberId])
// }


// model Friend {
//   id String @id @default(uuid())

//   userId String
//   member Member @relation(fields: [userId], references: [id], onDelete: Cascade)

//   friends Member[] @relation("Friendship")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

